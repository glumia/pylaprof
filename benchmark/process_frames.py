#!/usr/bin/env python

import argparse
import pickle
import statistics
import sys
import time

from record_frames import Code, Frame  # noqa

from pylaprof import StackCollapse


def main():
    parser = argparse.ArgumentParser(sys.argv[0])
    parser = argparse.ArgumentParser(
        description="benchmark sampler's processing of data generated by `record_frames.py`"  # noqa
    )
    parser.add_argument(
        "--iterations",
        metavar="NUM",
        type=int,
        default=100,
        help="number of iterations over frames data (default: 100)",
    )
    opts = parser.parse_args(sys.argv[1:])

    sampler = StackCollapse()
    with open("frames.dump", "rb") as fp:
        frames = pickle.load(fp)

    print("Iterating", opts.iterations, "times over", len(frames), "frames.\n")
    durations = []
    for i in range(opts.iterations):
        start = time.time()
        for frame in frames:
            sampler.sample(frame)
        durations.append(time.time() - start)

    # Normalize by number of stack frames (in this way we get how much it took on
    # average to process one single stack record)
    durations = [d / len(frames) for d in durations]

    print(
        "Performance stats for `sample` method of class",
        f"`{sampler.__class__.__name__}`:\n\t",
        statistics.mean(durations),
        "+-",
        statistics.stdev(durations),
        "seconds per call",
    )


if __name__ == "__main__":
    main()
